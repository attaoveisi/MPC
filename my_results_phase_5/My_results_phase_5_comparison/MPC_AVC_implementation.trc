-- ****************************************************************************
--
--  Trace file: MPC_AVC_implementation.trc
--
--  RTI1005 6.2 (14-Nov-2008)
--  Wed Mar 02 15:01:05 2016
--
--  Used options:
--    TRCGenerateVirtualBlocks      = 1
--    TRCGenerateLabels             = 1
--    TRCMaskParameters             = 0
--    TRCGenerateStates             = 0
--    TRCGenerateDerivatives        = 0
--    TRCGenerateParamValues        = 0
--    TRCGenerateApplicationKeyword = 0
--    EnableRTWCodeReuse            = 1
--
--  Trace file format: 2
--
--  (c) Copyright 2008, dSPACE GmbH. All rights reserved.
--
-- ****************************************************************************

-- ******** Keywords **********************************************************

-- _application "MPC_AVC_implementation.map"

_genname     "RTI"
_genversion  "6.2"
_gendate     "03/02/2016 15:01:08"
_description ""
_author      "RTI1005 6.2 (14-Nov-2008)"
_model       "MPC_AVC_implementation.mdl"

-- Default data type formats
_floating_point_type(64,IEEE)
_integer_type(32)

-- No Data Capture blocks within model: use base sample time as sampling period
sampling_period[0]
{
  value:       0.001
  alias:       "HostService"
  increment:   0.001
  unit:        "s"
}


-- Type definitions for arrays
typedef MPC_AVC_implementation_ArrayDT0_7 flt(64,IEEE)[7]
typedef MPC_AVC_implementation_ArrayDT0_4 flt(64,IEEE)[4]

-- ******** Simulation control variables **************************************

finalTime
{
 type:  flt(64,IEEE)*
 alias: "finalTime"
 desc:  "Simulation stop time. When reached, simState switches to STOP."
 flags:  SYSTEM|READONLY
 unit:  "s"
}

currentTime
{
 type:  flt(64,IEEE)*
 alias: "currentTime"
 desc:  "Current simulation time. Increments with execution of Timer Task 1."
 flags: SYSTEM|READONLY
 unit:  "s"
}

modelStepSize
{
 type:  flt(64,IEEE)
 alias: "modelStepSize"
 desc:  "Fixed step size of the model, sample time of Timer Task 1."
 flags: SYSTEM|READONLY
 unit:  "s"
}

simState
{
 type:  int(32)
 alias: "simState"
 desc:  "Simulation state: STOP=0 PAUSE=1 RUN=2"
 flags: SYSTEM
 unit:  "-"
}

msg_last_error_no
{
 type:  uint(32)
 alias: "errorNumber"
 desc:  "Error number of last error message (zero if no error)."
 unit:  "-"
 flags: SYSTEM|READONLY
}

rtiAssertionMode
{
 type:  int(32)
 alias: "rtiAssertionMode"
 desc:  "Assertion Mode: OFF=0 WARN=1 STOP=2"
 flags: SYSTEM
 unit:  "-"
}


-- ******** Model variables ***************************************************

group "Model Root"
{
 flags: COLLAPSED
}
	group "Amplifier" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[14]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[21]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "Amplifier"

	group "Amplifier1" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[21]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[30]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "Amplifier1"

	group "Amplifier2" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[7]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[15]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "Amplifier2"

	group "Gain1" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[16]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[24]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "Gain1"

	group "Piezo1_dspace" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[18]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[27]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "Piezo1_dspace"

	group "dSpace_gain1" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[19]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[28]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "dSpace_gain1"

	group "dSpace_gain2" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[25]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[33]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "dSpace_gain2"

	group "dSpace_gain3" -- block-group
	{
	 block: "Gain"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[20]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[29]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Gain"
		 flags:   PARAM
		}


	endgroup -- block-group "dSpace_gain3"

	group "Ground" -- block-group
	{
	 block: "Ground"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		-- Skipping output Out1


	endgroup -- block-group "Ground"

	group "Saturation" -- block-group
	{
	 block: "Saturate"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[6]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[13]
		{
		 type:    flt(64,IEEE)*
		 alias:   "UpperLimit"
		 flags:   PARAM
		}
		p_MPC_AVC_implementation_P_real_T_0[14]
		{
		 type:    flt(64,IEEE)*
		 alias:   "LowerLimit"
		 flags:   PARAM
		}


	endgroup -- block-group "Saturation"

	group "Saturation1" -- block-group
	{
	 block: "Saturate"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[17]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[25]
		{
		 type:    flt(64,IEEE)*
		 alias:   "UpperLimit"
		 flags:   PARAM
		}
		p_MPC_AVC_implementation_P_real_T_0[26]
		{
		 type:    flt(64,IEEE)*
		 alias:   "LowerLimit"
		 flags:   PARAM
		}


	endgroup -- block-group "Saturation1"

	group "Saturation2" -- block-group
	{
	 block: "Saturate"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[13]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[19]
		{
		 type:    flt(64,IEEE)*
		 alias:   "UpperLimit"
		 flags:   PARAM
		}
		p_MPC_AVC_implementation_P_real_T_0[20]
		{
		 type:    flt(64,IEEE)*
		 alias:   "LowerLimit"
		 flags:   PARAM
		}


	endgroup -- block-group "Saturation2"

	group "Control_Signal1" -- block-group
	{
	 block: "Scope"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[7]
		{
		 type:    flt(64,IEEE)*
		 alias:   "In1"
		 desc:    ""
		 flags:   SINK|READONLY
		}



	endgroup -- block-group "Control_Signal1"

	group "Control_Signal2" -- block-group
	{
	 block: "Scope"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[14]
		{
		 type:    flt(64,IEEE)*
		 alias:   "In1"
		 desc:    ""
		 flags:   SINK|READONLY
		}



	endgroup -- block-group "Control_Signal2"

	group "disturbance" -- block-group
	{
	 block: "Scope"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[16]
		{
		 type:    flt(64,IEEE)*
		 alias:   "In1"
		 desc:    ""
		 flags:   SINK|READONLY
		}



	endgroup -- block-group "disturbance"

	group "velocimeter" -- block-group
	{
	 block: "Scope"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[21]
		{
		 type:    flt(64,IEEE)*
		 alias:   "In1"
		 desc:    ""
		 flags:   SINK|READONLY
		}



	endgroup -- block-group "velocimeter"

	group "Signal\nGenerator" -- block-group
	{
	 block: "SignalGenerator"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[15]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		RTISigGenWF[0]
		{
		 type:  int(32)
		 alias: "WaveForm"
		 flags: PARAM
		}

		p_MPC_AVC_implementation_P_real_T_0[22]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Amplitude"
		 flags:   PARAM
		}
		p_MPC_AVC_implementation_P_real_T_0[23]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Frequency"
		 flags:   PARAM
		}


	endgroup -- block-group "Signal\nGenerator"

	group "Analog\nFilter Design1" -- block-group
	{
	 block: "StateSpace"
	 desc:  ""
	 flags: BLOCK|COLLAPSED
	}
		p_MPC_AVC_implementation_B_real_T_0[0]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out1"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}
		p_MPC_AVC_implementation_P_real_T_0[0]
		{
		 type:    MPC_AVC_implementation_ArrayDT0_7*
		 alias:   "A"
		 flags:   PARAM
		}
		p_MPC_AVC_implementation_P_real_T_0[7]
		{
		 type:    flt(64,IEEE)*
		 alias:   "B"
		 flags:   PARAM
		}
		p_MPC_AVC_implementation_P_real_T_0[8]
		{
		 type:    flt(64,IEEE)*
		 alias:   "C"
		 flags:   PARAM
		}
		p_MPC_AVC_implementation_P_real_T_0[9]
		{
		 type:    flt(64,IEEE)*
		 alias:   "X0"
		 flags:   PARAM
		}


	endgroup -- block-group "Analog\nFilter Design1"

  
  
	group "Chirp Signal" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		p_MPC_AVC_implementation_B_real_T_0[32]
		{
		 type:    flt(64,IEEE)*
		 alias:   "Out2"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


		group "Clock1" -- block-group
		{
		 block: "Clock"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[26]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Clock1"

		group "deltaFreq" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_MPC_AVC_implementation_P_real_T_0[34]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "deltaFreq"

		group "initialFreq" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_MPC_AVC_implementation_P_real_T_0[37]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "initialFreq"

		group "targetTime" -- block-group
		{
		 block: "Constant"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			-- Skipping output Out1
			p_MPC_AVC_implementation_P_real_T_0[35]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Value"
			 flags:   PARAM
			}


		endgroup -- block-group "targetTime"

		group "Gain" -- block-group
		{
		 block: "Gain"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[28]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[36]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Gain"
			 flags:   PARAM
			}


		endgroup -- block-group "Gain"

		group "Product" -- block-group
		{
		 block: "Product"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[27]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Product"

		group "Product1" -- block-group
		{
		 block: "Product"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[29]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Product1"

		group "Product2" -- block-group
		{
		 block: "Product"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[31]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Product2"

		group "Sum" -- block-group
		{
		 block: "Sum"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[30]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Sum"

		group "Output" -- block-group
		{
		 block: "Trigonometry"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[32]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Output"



	endgroup -- subsystem-group "Chirp Signal"
  
  
	group "DS2004ADC_BL1" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		p_MPC_AVC_implementation_B_real_T_0[22]
		{
		 type:    flt(64,IEEE)*
		 alias:   "ADC"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}

	endgroup -- subsystem-group "DS2004ADC_BL1"
  
  
	group "DS2102_B1" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}


	endgroup -- subsystem-group "DS2102_B1"
  
  
	group "PID Controller1" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		p_MPC_AVC_implementation_B_real_T_0[5]
		{
		 type:    flt(64,IEEE)*
		 alias:   "u"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


		group "e" -- block-group
		{
		 block: "Inport"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[0]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "e"

		group "Ideal\nDerivative" -- block-group
		{
		 block: "Derivative"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[4]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Ideal\nDerivative"

		group "Derivative\nGain" -- block-group
		{
		 block: "Gain"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[3]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[12]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Gain"
			 flags:   PARAM
			}


		endgroup -- block-group "Derivative\nGain"

		group "Integral\nGain" -- block-group
		{
		 block: "Gain"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[23]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[31]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Gain"
			 flags:   PARAM
			}


		endgroup -- block-group "Integral\nGain"

		group "Proportional\nGain" -- block-group
		{
		 block: "Gain"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[1]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[10]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Gain"
			 flags:   PARAM
			}


		endgroup -- block-group "Proportional\nGain"

		group "Integrator" -- block-group
		{
		 block: "Integrator"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[2]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[11]
			{
			 type:    flt(64,IEEE)*
			 alias:   "InitialCondition"
			 flags:   PARAM
			}


		endgroup -- block-group "Integrator"

		group "Sum" -- block-group
		{
		 block: "Sum"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[5]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Sum"



	endgroup -- subsystem-group "PID Controller1"
  
  
	group "PID Controller2" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}

		p_MPC_AVC_implementation_B_real_T_0[12]
		{
		 type:    flt(64,IEEE)*
		 alias:   "u"
		 desc:    ""
		 flags:   OUTPUT|READONLY
		}


		group "e" -- block-group
		{
		 block: "Inport"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[0]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "e"

		group "Ideal\nDerivative" -- block-group
		{
		 block: "Derivative"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[11]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Ideal\nDerivative"

		group "Derivative\nGain" -- block-group
		{
		 block: "Gain"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[10]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[18]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Gain"
			 flags:   PARAM
			}


		endgroup -- block-group "Derivative\nGain"

		group "Integral\nGain" -- block-group
		{
		 block: "Gain"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[24]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[32]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Gain"
			 flags:   PARAM
			}


		endgroup -- block-group "Integral\nGain"

		group "Proportional\nGain" -- block-group
		{
		 block: "Gain"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[8]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[16]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Gain"
			 flags:   PARAM
			}


		endgroup -- block-group "Proportional\nGain"

		group "Integrator" -- block-group
		{
		 block: "Integrator"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[9]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}
			p_MPC_AVC_implementation_P_real_T_0[17]
			{
			 type:    flt(64,IEEE)*
			 alias:   "InitialCondition"
			 flags:   PARAM
			}


		endgroup -- block-group "Integrator"

		group "Sum" -- block-group
		{
		 block: "Sum"
		 desc:  ""
		 flags: BLOCK|COLLAPSED
		}
			p_MPC_AVC_implementation_B_real_T_0[12]
			{
			 type:    flt(64,IEEE)*
			 alias:   "Out1"
			 desc:    ""
			 flags:   OUTPUT|READONLY
			}


		endgroup -- block-group "Sum"



	endgroup -- subsystem-group "PID Controller2"
  
  
	group "RTI Data" -- subsystem-group
	{
	 flags: COLLAPSED
	 desc:  ""
	}


	endgroup -- subsystem-group "RTI Data"




endgroup -- "Model Root"
-- ******** Model Root Parameters from model_mrp.trc **************************
-- Model Root Parameters file is only generated if option TRCMaskParameters is enabled

-- ******** Tunable Parameters ************************************************

-- InlineParameters is off: no separate group for Tunable Parameters


-- ******** State Machine Data ************************************************

-- No Stateflow chart within the model.


-- ******** Data Store Memories ***********************************************

-- No Data Store Memories within the model.


-- ******** Labels ************************************************************

group "Labels"
{
 flags: COLLAPSED
}

endgroup

-- ******** RTT Dynamic Variables *********************************************

-- Generation of RTT Dynamic Variables turned off with EnableRealTimeTesting option.

-- ******** User variables from model_usr.trc *********************************

-- RTI_USR_TRC_BEGIN

-- No user file MPC_AVC_implementation_usr.trc found.

-- RTI_USR_TRC_END

-- ******** Task Information variables ****************************************

group "Task Info"
{
 flags: COLLAPSED
}
  group "Timer Task 1"
  {
   flags: COLLAPSED
  }

  pRti_TIMERA_STime
  {
   type:  flt(64,IEEE)*
   alias: "sampleTime"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_TTime
  {
   type:  flt(64,IEEE)*
   alias: "turnaroundTime"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_TState
  {
   type:  int(32)*
   alias: "state"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_OType
  {
   type:  int(32)*
   alias: "overrunCheckType"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_OMax
  {
   type:  int(32)*
   alias: "overrunQueueMax"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_ORpt
  {
   type:  int(32)*
   alias: "overrunQueueCount"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_OCnt
  {
   type:  int(32)*
   alias: "overrunCount"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_TCnt
  {
   type:  flt(64,IEEE)*
   alias: "taskCallCount"
   flags: SYSTEM|READONLY
  }
  pRti_TIMERA_Prio
  {
   type:  int(32)*
   alias: "priority"
   flags: SYSTEM|READONLY
  }
  endgroup

endgroup

-- ******** [EOF] *************************************************************



